# net/arbiter/factory/task.py

# built-in
from typing import Generic, Type, TypeVar

# internal
from runtimepy.net.arbiter.info import AppInfo
from runtimepy.task.basic import (
    DEFAULT_DEPTH,
    PeriodicTask,
    PeriodicTaskMetrics,
)


class ArbiterTask(PeriodicTask):
    """TODO."""

    def init(self, *args, **kwargs) -> None:
        """An optional initialization method."""


T = TypeVar("T", bound=ArbiterTask)


class TaskFactory(Generic[T]):
    """A base class for creating tasks."""

    kind: Type[T]

    async def create(
        self,
        app: AppInfo,
        name: str,
        *args,
        average_depth: int = DEFAULT_DEPTH,
        metrics: PeriodicTaskMetrics = None,
        **kwargs,
    ) -> T:
        """Create the task."""

        # need to store periods, make a task manager be a part of the base
        # connection arbiter?

        tasks = self.kind(
            name,
            app,
            *args,
            average_depth=average_depth,
            metrics=metrics,
            **kwargs,
        )

        return tasks
